# Template: https://www.notion.com/templates/kanban-board

substitutions:
  device_name: "kanban-board"
  friendly_name: Kanban Board
  timezone: Asia/Taipei
  notion_api_token: !secret notion_api_token
  notion_database_id: 1c962bab1907800a9c77e799c6e5adc2
  json_parse_buffer_size: 30kb
  query_update_interval: 1min
  line_height: "40"
  page_size: "10"
  text_font_size: "30"
  timestamp_font_size: "20"  

external_components:
  - source: github://parkghost/esphome-epaper
    components: [ waveshare_epaper ]

  - source: ../components
    components: [notion_database, notion_database_table_view]

logger:
  level: DEBUG
  # baud_rate: 0

esphome:
  name: $device_name
  friendly_name: $friendly_name

  platformio_options:
    board_build.arduino.memory_type: qio_opi
    board_build.flash_mode: qio
    build_flags:
      - "-DCONFIG_SPIRAM_CACHE_WORKAROUND"
      - "-mfix-esp32-psram-cache-issue"

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  framework:
    type: arduino

psram:
  mode: octal
  speed: 80MHz

wifi:
  id: wifi_id
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  on_connect:
    - delay: 3s # wait for the other components to be initialized
    - globals.set:
        id: initial
        value: "true"
    - script.execute: pull_database

globals:
  - id: initial
    type: bool
    initial_value: "false"

notion_database:
  - id: db1
    api_token: $notion_api_token
    database_id: $notion_database_id
    json_parse_buffer_size: $json_parse_buffer_size
    update_interval: never
    query: |-
      {
        "filter":{
            "property":"Status",
            "status":{
              "equals":"Not started"
            }
        },
        "sorts":[
            {
              "property": "Deadline",
              "direction":"ascending"
            }
        ],
        "page_size":$page_size
      }
    property_filters:
      - Name

  - id: db2
    api_token: $notion_api_token
    database_id: $notion_database_id
    json_parse_buffer_size: $json_parse_buffer_size
    update_interval: never
    query: |-
      {
        "filter":{
            "property":"Status",
            "status":{
              "equals":"In development"
            }
        },
        "sorts":[
            {
              "property": "Deadline",
              "direction":"ascending"
            }
        ],
        "page_size":$page_size
      }
    property_filters:
      - Name

notion_database_table_view:
  - id: view1
    notion_database_id: db1
    title: "Not Started"
    columns:
      - Name
    invert_title_color: true
    enable_title: true
    enable_header: false
    enable_grid_line: false
    enable_list_style: true
    line_height: $line_height

  - id: view2
    notion_database_id: db2
    title: "In Development"
    columns:
      - Name
    invert_title_color: true
    enable_title: true
    enable_header: false
    enable_grid_line: false
    enable_list_style: true
    line_height: $line_height

time:
  - platform: sntp
    id: esp_time
    timezone: $timezone
    servers:
      - time1.google.com
      - time2.google.com
      - time3.google.com
    on_time:
      - cron: "0 0 4 * * *"
        then:
          - lambda: id(my_display).full_refresh();

interval:
  - interval: $query_update_interval
    then:
      - script.execute: pull_database

button:
  - platform: template
    name: "Query - Execute"
    on_press:
      - script.execute: pull_database

  - platform: template
    name: "DB1 Query - First Page"
    on_press:
      - notion_database.first_page: db1

  - platform: template
    name: "DB1 Query - Previous Page"
    on_press:
      - notion_database.prev_page: db1

  - platform: template
    name: "DB1 Query - Next Page"
    on_press:
      - notion_database.next_page: db1

  - platform: template
    name: "DB2 Query - First Page"
    on_press:
      - notion_database.first_page: db2

  - platform: template
    name: "DB2 Query - Previous Page"
    on_press:
      - notion_database.prev_page: db2

  - platform: template
    name: "DB2 Query - Next Page"
    on_press:
      - notion_database.next_page: db2      

script:
  - id: pull_database
    mode: single
    then:
      - lambda: |-
          if(!id(initial)){
            return;
          }
          if (!id(wifi_id).is_connected()) {
            return;
          }

          id(db1)->update();
          id(db2)->update();
          if(id(db1).has_page_change() || id(db2).has_page_change()) {
            id(refresh_display).execute();
          }
      - delay: 1s

  - id: refresh_display
    then:
      - component.update: my_display
      - delay: 3s

font:
  - file: "gfonts://Roboto"
    id: text_font
    size: $text_font_size

  - file: "gfonts://Roboto"
    id: timestamp_font
    size: $timestamp_font_size

spi:
  clk_pin: GPIO12
  mosi_pin: GPIO11

display:
  - platform: waveshare_epaper
    id: my_display
    model: gdey075t7
    reset_pin: GPIO13
    dc_pin: GPIO14
    cs_pin: GPIO10
    busy_pin: GPIO9
    rotation: 0
    update_interval: never
    full_update_every: 10
    lambda: |-
      auto BLACK   = Color(0,   0,   0,   0);
      auto RED     = Color(255, 0,   0,   0);
      auto WHITE   = Color(255, 255, 255, 0);

      if (it.get_display_type() == DisplayType::DISPLAY_TYPE_BINARY) {
        BLACK = COLOR_ON;
        WHITE = COLOR_OFF;
      } else if (it.get_display_type() == DisplayType::DISPLAY_TYPE_COLOR) {
        it.fill(WHITE);
      }
      int screen_width = it.get_width();
      int screen_height = it.get_height();

      if (!id(wifi_id).is_connected()) {
        it.print(screen_width / 2, screen_height / 2, id(text_font), BLACK,
                  TextAlign::CENTER, "WiFi Connecting");
        return;
      }

      int top_offset = 0;
      int bottom_offset =  $timestamp_font_size;

      id(view1).draw(it, 0, top_offset, screen_width / 2 - 9, screen_height - top_offset - bottom_offset, id(text_font), BLACK, WHITE);
      id(view2).draw(it, screen_width / 2 + 9, top_offset, screen_width / 2 - 9 , screen_height - top_offset - bottom_offset, id(text_font), BLACK, WHITE);

      auto tm = id(esp_time).now();
      if (!tm.is_valid()) {
        return;
      }

      it.strftime(screen_width - $timestamp_font_size/2, screen_height - 3, id(timestamp_font), BLACK,
                  TextAlign::BOTTOM_RIGHT, "Last Updated: %Y-%m-%d %H:%M", tm);
